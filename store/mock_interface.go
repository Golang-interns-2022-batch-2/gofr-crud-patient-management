// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package store is a generated GoMock package.
package store

import (
	models "GOFR/models"
	reflect "reflect"

	gofr "developer.zopsmart.com/go/gofr/pkg/gofr"
	gomock "github.com/golang/mock/gomock"
)

// MockPatient is a mock of Patient interface.
type MockPatient struct {
	ctrl     *gomock.Controller
	recorder *MockPatientMockRecorder
}

// MockPatientMockRecorder is the mock recorder for MockPatient.
type MockPatientMockRecorder struct {
	mock *MockPatient
}

// NewMockPatient creates a new mock instance.
func NewMockPatient(ctrl *gomock.Controller) *MockPatient {
	mock := &MockPatient{ctrl: ctrl}
	mock.recorder = &MockPatientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatient) EXPECT() *MockPatientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPatient) Create(ctx *gofr.Context, patient *models.Patient) (*models.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, patient)
	ret0, _ := ret[0].(*models.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPatientMockRecorder) Create(ctx, patient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPatient)(nil).Create), ctx, patient)
}

// Delete mocks base method.
func (m *MockPatient) Delete(ctx *gofr.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPatientMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPatient)(nil).Delete), ctx, id)
}

// Get mocks base method.
func (m *MockPatient) Get(ctx *gofr.Context) ([]*models.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx)
	ret0, _ := ret[0].([]*models.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPatientMockRecorder) Get(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPatient)(nil).Get), ctx)
}

// GetByID mocks base method.
func (m *MockPatient) GetByID(ctx *gofr.Context, id int) (*models.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*models.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockPatientMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPatient)(nil).GetByID), ctx, id)
}

// Update mocks base method.
func (m *MockPatient) Update(ctx *gofr.Context, id int, patient *models.Patient) (*models.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, patient)
	ret0, _ := ret[0].(*models.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPatientMockRecorder) Update(ctx, id, patient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPatient)(nil).Update), ctx, id, patient)
}
